body{
    background-color: #eee;
    padding: 0;
    margin: 0;

}

/* Grid lo que hace es acomodar los elementos como una columna, una encima de la otra */
/* la propiedad inline lo acomoda al ancho del elemento dentro de la etiqueta, y ademas
acomoda el ancho de acuerdo al elemento mas ancho */
.grid{
    display: grid;
    width: 100%;
    height: 100vh;
    grid-template-columns: repeat(4, 50px);
    grid-template-rows: repeat(3, 50px);
    grid-gap: 5px;
    justify-content: start;
    align-content: space-evenly;
    /* background-color: red; */
    /* grid-template-areas:    "header header" */
                            /* "content sidebar"  */
                            /* "footer" "footer"; */
    /* grid-template-rows: 150px 1fr 100px; */
    /*grid-template-columns: 1fr 200px;   */ /* <-- Esto es una grilla explicita, 
    es decir que nosotros le decimos como comportarse, de acuerdo a esto, 
    todo lo hagamos dentro del contenedor, será ahi donde se almacene, pero 
    tambien podemos darle un comportamiento a estas grillas implicitas. */
 
    
    /* GRILLA IMPLICITA  (Es todo aquello que nosotros no definimos dentro de 
    nuestra grilla, por ejemplo, lo que sigue despues del footer)*/

    /* grid-auto-rows: 140px; todas las filas que no esten definidas de manera 
    explicita van a tener un alto de 140px */
    /* grid-auto-flow: row;  */

    /* justify-items: stretch; Este es el eje Horizontal */
    /* align-items: end; Vertical */

    /* grid-template-rows: 50px 100px;  */
    /* con grid-template-rows vamos a poder decir a los elementos cuanto de altura 
    tendrá */

    /* grid-template-columns: 1fr 2fr 3fr; */
    /* Con column indicaremos cuanto de ancho tendran los elementos  */
    /* fr lo que hace es darle fracciones a las columnas de acuerdo al ancho total de 
    la pantalla */

    /* grid-template-rows: minmax(100px, auto);
    grid-template-columns: minmax(auto, 50%) 1fr 3em; */
    /* Con esta forma nosotros podemos establecer el minimo y maximo de ancho,  */

    /* grid-template-rows: repeat(2, 50px); */
    /* grid-template-columns: 30px repeat(3, 1fr) 5rem; */
    /* Con repeat podemos repetir dimensiones a los elementos pero tambien podemos 
    dividirlo de forma que entre estos, le especifiquemos a un elemento en particular
    cual va a ser su dimensaion como:  */
    /* grid-template-columns: 30px repeat(3, 1fr) 5rem; */

    /* grid-row-gap: 30px */
    /* grid-column-gap: 10px */
    /* Con estos valores nosotros le decimos el espacio entre filas y columnas pero
    con la de abajo, le damos las dos de una ves, y si ponemos solamente una 
    propiedad nosotros le estamos diciendo que entre filas y columnas haya 12px 
    por ejemplo. */
    /* grid-gap: 20px 10px; */
    
    /* grid-gap: 15px; */
    /* grid-template-rows: repeat(2, [rowInicio] 50px [rowFin]); */
    /* grid-template-columns: repeat(3 ,[colStart] 1fr [colEnd]); */
    
    /* Nosotros podemos asignarle un nombre con los parentecis cuadrados y usarlos 
    despues con estos nombres */



}

.red{
    background-color: red;
}

/* .blue{
    background-color: blue;
} */

/* .header{ */
    /* grid-column-start: 1; */
    /* grid-column-end: 6; */
    /* grid-row-start: 1; */
    /* grid-row-end: 3; */
    
    /* summarizing */
    /* grid-column: colStart/colEnd 3; Usamos los nombres que antes declaramos */
    /* grid-row: rowInicio/rowFin 3; Usamos los nombres que antes declaramos */
/* }  */
/* 
.item1{
    justify-self: center ;
    Acomoda el elemento donde mas crea conveniente 
    y es horizontal
    align-self: center;
    Ahora este lo alinea en el eje X 
} */